Bubble Sort
  
void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n-1; ++i) {
        for (int j = 0; j < n-i-1; ++j) {
            if (arr[j] > arr[j+1])
                std::swap(arr[j], arr[j+1]);  
        }
    }
}

Insertion Sort 

void insertionSort(int arr[], int n) {
    int key, j;
    for (int i = 1; i < n; ++i) {
        key = arr[i];
        j = i - 1;

        while (j >= 0 && arr[j] > key) {
            arr[j+1] = arr[j];
            --j;
        }
        arr[j+1] = key;
    }
}

Selection Sort 

void selectionSort(int arr[], int n) {
    for (int i = 0; i < n-1; ++i) {
        int min_index = i;
        for (int j = i+1; j < n; ++j) {
            if (arr[j] < arr[min_index])
                min_index = j;
        }
        std::swap(arr[i], arr[min_index]);
    }
}

Heap Sort

void heapify(int arr[], int n, int i) {
    int largest = i;
    int l = 2*i + 1;
    int r = 2*i + 2;

    if (l < n && arr[l] > arr[largest])
        largest = l;

    if (r < n && arr[r] > arr[largest]) 
        largest = r;
        
    if (largest != i) {
        std::swap(arr[i], arr[largest]);
        heapify(arr, n, largest);
    }
}

void heapSort(int arr[], int n) {
    for (int i = n/2 - 1; i >= 0; --i)
        heapify(arr, n, i);

    for (int i = n-1; i > 0; --i) {
        std::swap(arr[0], arr[i]);
        heapify(arr, i, 0);
    }
}

Merge Sort 

void merge(int arr[], int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;

    int L[n1], R[n2];
    for (int i = 0; i < n1; ++i) 
        L[i] = arr[l + i];
        
    for (int j = 0; j < n2; ++j) 
        R[j] = arr[m + 1 + j];

    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            ++i;
        } else {
            arr[k] = R[j];
            ++j;
        }
        ++k;
    }

    while (i < n1) {
        arr[k] = L[i];
        ++i;
        ++k;
    }

    while (j < n2) {
        arr[k] = R[j];
        ++j;
        ++k;
    }
}
//recursiv
void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}
//non-recursiv
void mergeSort(int arr[], int l, int r) {
    int n = r - l + 1; 
    for (int cSize = 1; cSize <= n - 1;cSize=2 * cSize) {
        for (int left = 0; left < n - 1;left+=2 * cSize) {
            int mid = left + cSize - 1;
            int right = min(left + 2 * cSize - 1, n - 1);
            merge(arr, left, mid, right);
        }
    }
}

Quick Sort

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = low - 1;
    for (int j = low; j < high; ++j) {
        if (arr[j] < pivot) {
            ++i;
            std::swap(arr[i], arr[j]);
        }
    }
    std::swap(arr[i + 1], arr[high]);
    return i + 1;
}

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

Randomizare elemente

#include <cstdlib>
#include <ctime>

int* generateRandomArray(int n, int minVal, int maxVal) {

    int* arr = new int[n];

    srand(time(nullptr));
    for (int i = 0; i < n; ++i) {
        arr[i] = rand() % (maxVal - minVal + 1) + minVal;
    }
    return arr;
}
